#version 460 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D u_Image;

uniform ivec2 u_Resolution;
uniform float u_DeltaTime;
uniform float u_Time;

struct Agent
{
    float heading;
    float deposit;
    float speed;
    float cooldown;

    uint sensor_offset;
    uint sensor_number;

    vec2 position;
    vec3 pheromone;

    float _padding1[4];
};

struct Sensor
{
    float angle;
    float extent;

    float _padding1;
    float _padding2;
};

layout (std430, binding = 1) buffer Agents
{
    Agent agents[];
};

layout (std430, binding = 2) buffer Sensors
{
    Sensor sensors[];
};

const float PI = 3.14159265359;

float random(vec2 coordinate)
{
    return fract(sin(dot(coordinate, vec2(12.9898, 78.233))) * 43758.5453);
}

float sensor_measurement(Agent agent, Sensor sensor)
{
    float alpha = agent.heading + sensor.angle;

    vec2 position = vec2(sin(alpha), cos(alpha)) * sensor.extent + agent.position;
    position = mod(position, u_Resolution);

    vec3 color = vec3(0.0f);

    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            vec2 neighbour = position + ivec2(x, y);
            neighbour = mod(neighbour, u_Resolution);

            color += imageLoad(u_Image, ivec2(neighbour)).rgb;
        }
    }

    return length((color / 9) * agent.pheromone);
}

void main()
{
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);

    uint id = texel.x + texel.y * u_Resolution.y;

    if (id >= agents.length()) return;

    const float treshhold = 0.9f;

    float accumulated_angle = 0.0f;
    for (uint i = agents[id].sensor_offset; i < agents[id].sensor_offset + agents[id].sensor_number; ++i)
    {
        float value = sensor_measurement(agents[id], sensors[i]);

        if (agents[id].cooldown <= 0.0f && value >= treshhold)
        {
            agents[id].cooldown = 1.0f;
        }

        accumulated_angle += value * sensors[i].angle;
    }

    if (agents[id].cooldown > 0.0f)
    {
        agents[id].cooldown -= u_DeltaTime;
    }

    float angle = accumulated_angle + random(agents[id].position) * (PI / 180);

    agents[id].heading += angle * mix(1.0f, -1.0f, smoothstep(0.0f, 1.0f, agents[id].cooldown));

    agents[id].position += vec2(sin(agents[id].heading), cos(agents[id].heading)) * agents[id].speed;
    agents[id].position = mod(agents[id].position, u_Resolution);

    vec3 deposit = agents[id].pheromone * agents[id].deposit;
    vec3 color = imageLoad(u_Image, ivec2(agents[id].position)).rgb;

    imageStore(u_Image, ivec2(agents[id].position), vec4(deposit + color, 1.0f));
}
